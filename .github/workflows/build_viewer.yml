name: Build viewer

on:
  workflow_dispatch:
    inputs:
      operating_system:
        required: true
        type: choice
        description: Operating system
        options:
        - macos-11
      address_size:
        required: true
        type: choice
        description: Address size
        options:
        - 64
        - 32
        default: 64
      build_config:
        required: true
        description: Build configuration
        default: 'ReleaseFS'
      viewer_channel:
        required: true
        description: Viewer channel
        default: 'Betax64'
      grid:
        required: true
        type: choice
        description: Grid
        options:
        - secondlife
        - opensim

env:
  AUTOBUILD_INSTALLABLE_CACHE: ${{github.workspace}}/dep/packages
  AUTOBUILD_VARIABLES_FILE: ${{github.workspace}}/dep/build-variables/variables
  ADDRESS_SIZE: ${{ github.event.inputs.address_size }}
  BUILD_CONFIG: ${{ github.event.inputs.build_config }}
  VIEWER_CHANNEL: ${{ github.event.inputs.viewer_channel }}

jobs:
  build:
    runs-on: ${{ github.event.inputs.operating_system }}

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Check out autobuild
      uses: actions/checkout@v2
      with:
        repository: KittyBarnett/fs-autobuild
        ref: main
        path: 'dep/autobuild'

    - name: Check out build-variables
      uses: actions/checkout@v2
      with:
        repository: KittyBarnett/fs-build-variables
        ref: main
        path: 'dep/build-variables'

    - name: Check out action-scp
      uses: actions/checkout@v2
      with:
        repository: CatznipViewer/action-scp
        ref: main
        path: 'dep/action-scp'

    - name: Set environment variables
      run: |
        echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
        echo "DEPENDENCIES_SRC_PATH=/dependencies/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
        echo "ARTIFACT_DST_PATH=/artifacts/${GITHUB_REPOSITORY#*/}/" >> $GITHUB_ENV
        echo "build_secrets_checkout=./dep/signing" >> $GITHUB_ENV
      shell: bash

    - name: Install certificate
      env:
        FS_CERT: ${{ secrets.FS_CERT }}
        FS_CERT_PASS: ${{ secrets.FS_PASS }}
        FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
      run: |
        mkdir -p ${build_secrets_checkout}/code-signing-osx
        echo "$FS_CERT_PASS" > ${build_secrets_checkout}/code-signing-osx/password.txt
        echo -n "$FS_CERT" | base64 --decode --output ${build_secrets_checkout}/code-signing-osx/fs-cert.p12
        security create-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/viewer.keychain
        security set-keychain-settings -lut 21600 ~/Library/Keychains/viewer.keychain
        security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/viewer.keychain
        # import certificate to keychain
        security import ${build_secrets_checkout}/code-signing-osx/fs-cert.p12 -P "$FS_CERT_PASS" -A -t cert -f pkcs12 -k ~/Library/Keychains/viewer.keychain
        security list-keychain -d user -s ~/Library/Keychains/viewer.keychain
          
      shell: bash

    - name: Download private packages
      uses: ./dep/action-scp
      with:
        key: ${{ secrets.SCP_KEY }}
        source_host: ${{ secrets.SCP_HOST }}
        source_username: ${{ secrets.SCP_USER }}
        source_file: ${{ env.DEPENDENCIES_SRC_PATH }}/packages/*
        destination_file: './dep/packages/'

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        architecture: 'x64'

    - name: Install autobuild
      run: pip3 install git+https://github.com/Nicky-D/autobuild@main_nd

    - name: Install llbase
      run: pip3 install llbase

    - name: Run autobuild configure (Mac)
      if: runner.os == 'macOS'
      run: autobuild configure --verbose -A ${{ env.ADDRESS_SIZE }} -c ${{ env.BUILD_CONFIG }} -- ${{ github.event.inputs.grid == 'secondlife' && '-DHAVOK_TPV=true --no-opensim' || '-DHAVOK_TPV=false --opensim' }} --package --chan "${{ env.VIEWER_CHANNEL }}"

    - name: Run autobuild build
      run: autobuild build -A ${{ env.ADDRESS_SIZE }} -c ${{ env.BUILD_CONFIG }} --no-configure

    - name: Create artifact (Mac)
      if: runner.os == 'macOS'
      run: |
        tar -cvzf ./"${VIEWER_CHANNEL}-$(cat ./indra/newview/VIEWER_VERSION.txt).${AUTOBUILD_BUILD_ID}-${RUNNER_OS}${ADDRESS_SIZE}-${{github.event.inputs.grid}}.tar.gz" ./build-darwin-x86_64/newview/*.dmg
      shell: bash

    - name: Publish artifact
      uses: ./dep/action-scp
      with:
        key: ${{ secrets.SCP_KEY }}
        source_file: ./*.tar.gz
        destination_host: ${{ secrets.SCP_HOST }}
        destination_username: ${{ secrets.SCP_USER }}
        destination_file: ${{ env.ARTIFACT_DST_PATH }}
